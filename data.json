{
  id: "821c9431c1cc47499ef151abfff7d64d",
  project: 1194628,
  release: null,
  dist: null,
  platform: "node",
  culprit: "app in mainHandler",
  message: "Error: Broke!",
  datetime: "2018-04-23T19:30:48.000000Z",
  time_spent: null,
  tags: [
    [
      "transaction",
      "app in mainHandler"
    ],
    [
      "server_name",
      "LAPTOP-UHOIOR3J"
    ],
    [
      "level",
      "error"
    ],
    [
      "url",
      "http://localhost/"
    ],
    [
      "sentry:user",
      "ip:::1"
    ],
    [
      "device",
      "Other"
    ],
    [
      "os",
      "Windows 10"
    ],
    [
      "browser",
      "Chrome 65.0"
    ]
  ],
  errors: [],
  extra: {
    node: "v9.8.0"
  },
  fingerprint: [
    "{{ default }}"
  ],
  key_id: 565183,
  metadata: {
    type: "Error",
    value: "Broke!"
  },
  modules: {
    inherits: "2.0.3",
    is - buffer: "1.1.6",
    methods: "1.1.2",
    escape - html: "1.0.3",
    accepts: "1.3.5",
    vary: "1.1.2",
    negotiator: "0.6.1",
    on - finished: "2.3.0",
    mime - types: "2.1.18",
    serve - static: "1.13.2",
    statuses: "1.4.0",
    stack - trace: "0.0.10",
    parseurl: "1.3.2",
    forwarded: "0.1.2",
    crypt: "0.0.2",
    send: "0.16.2",
    array - flatten: "1.1.1",
    unpipe: "1.0.0",
    ipaddr.js: "1.6.0",
    iconv - lite: "0.4.19",
    encodeurl: "1.0.2",
    destroy: "1.0.4",
    mime - db: "1.33.0",
    utils - merge: "1.0.1",
    merge - descriptors: "1.0.1",
    setprototypeof: "1.1.0",
    safe - buffer: "5.1.1",
    content - disposition: "0.5.2",
    charenc: "0.0.2",
    http - errors: "1.6.3",
    cookie - signature: "1.0.6",
    mime: "1.4.1",
    range - parser: "1.2.0",
    proxy - addr: "2.0.3",
    path - to - regexp: "0.1.7",
    md5: "2.2.1",
    finalhandler: "1.1.1",
    depd: "1.1.2",
    qs: "6.5.1",
    raw - body: "2.3.2",
    etag: "1.8.1",
    bytes: "3.0.0",
    uuid: "3.0.0",
    body - parser: "1.18.2",
    express: "4.16.3",
    fresh: "0.5.2",
    type - is: "1.6.16",
    ms: "2.0.0",
    ee - first: "1.1.1",
    debug: "2.6.9",
    cookie: "0.3.1",
    media - typer: "0.3.0",
    raven: "2.5.0",
    content - type: "1.0.4",
    timed - out: "4.0.1"
  },
  received: 1524511850,
  sdk: {
    version: "2.5.0",
    name: "raven-node"
  },
  sentry.interfaces.Breadcrumbs: {},
  sentry.interfaces.Exception: {
    exc_omitted: null,
    values: [{
      stacktrace: {
        frames: [{
            function: "HTTPParser.parserOnHeadersComplete",
            abs_path: "_http_common.js",
            module: "_http_common",
            in_app: false,
            lineno: 117,
            colno: 17,
            filename: "_http_common.js"
          },
          {
            function: "parserOnIncoming",
            abs_path: "_http_server.js",
            module: "_http_server",
            in_app: false,
            lineno: 642,
            colno: 12,
            filename: "_http_server.js"
          },
          {
            function: "Server.emit",
            abs_path: "domain.js",
            module: "domain",
            in_app: false,
            lineno: 421,
            colno: 20,
            filename: "domain.js"
          },
          {
            function: "Server.emit",
            abs_path: "events.js",
            module: "events",
            in_app: false,
            lineno: 180,
            colno: 13,
            filename: "events.js"
          },
          {
            function: "Server.app",
            abs_path: "C:\Users\NASA\Desktop\test\node_modules\express\lib\express.js",
            pre_context: [
              " *",
              " * @return {Function}",
              " * @api public",
              " */",
              "",
              "function createApplication() {",
              " var app = function(req, res, next) {"
            ],
            post_context: [
              " };",
              "",
              " mixin(app, EventEmitter.prototype, false);",
              " mixin(app, proto, false);",
              "",
              " // expose the prototype that will get set on requests",
              " app.request = Object.create(req, {"
            ],
            filename: "C:\Users\NASA\Desktop\test\node_modules\express\lib\express.js",
            module: "express",
            colno: 9,
            in_app: true,
            context_line: " app.handle(req, res, next);",
            lineno: 39
          },
          {
            function: "Function.handle",
            abs_path: "C:\Users\NASA\Desktop\test\node_modules\express\lib\application.js",
            pre_context: [
              " // no routes",
              " if (!router) {",
              " debug('no routes defined on app');",
              " done();",
              " return;",
              " }",
              ""
            ],
            post_context: [
              "};",
              "",
              "/**",
              " * Proxy `Router#use()` to add middleware to the app router.",
              " * See Router#use() documentation for details.",
              " *",
              " * If the _fn_ parameter is an express app, then it will be"
            ],
            filename: "C:\Users\NASA\Desktop\test\node_modules\express\lib\application.js",
            module: "application",
            colno: 10,
            in_app: true,
            context_line: " router.handle(req, res, done);",
            lineno: 174
          },
          {
            function: "Function.handle",
            abs_path: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\index.js",
            pre_context: [
              " });",
              " }",
              "",
              " // setup basic req values",
              " req.baseUrl = parentUrl;",
              " req.originalUrl = req.originalUrl || req.url;",
              ""
            ],
            post_context: [
              "",
              " function next(err) {",
              " var layerError = err === 'route'",
              " ? null",
              " : err;",
              "",
              " // remove added slash"
            ],
            filename: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\index.js",
            module: "index",
            colno: 3,
            in_app: true,
            context_line: " next();",
            lineno: 174
          },
          {
            function: "next",
            abs_path: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\index.js",
            pre_context: [
              " // Capture one-time layer values",
              " req.params = self.mergeParams",
              " ? mergeParams(layer.params, parentParams)",
              " : layer.params;",
              " var layerPath = layer.path;",
              "",
              " // this should be done for the layer"
            ],
            post_context: [
              " if (err) {",
              " return next(layerError || err);",
              " }",
              "",
              " if (route) {",
              " return layer.handle_request(req, res, next);",
              " }"
            ],
            filename: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\index.js",
            module: "index",
            colno: 10,
            in_app: true,
            context_line: " self.process_params(layer, paramcalled, req, res, function (err) {",
            lineno: 275
          },
          {
            function: "Function.process_params",
            abs_path: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\index.js",
            pre_context: [
              " var params = this.params;",
              "",
              " // captured parameters from the layer, keys and values",
              " var keys = layer.keys;",
              "",
              " // fast track",
              " if (!keys || keys.length === 0) {"
            ],
            post_context: [
              " }",
              "",
              " var i = 0;",
              " var name;",
              " var paramIndex = 0;",
              " var key;",
              " var paramVal;"
            ],
            filename: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\index.js",
            module: "index",
            colno: 12,
            in_app: true,
            context_line: " return done();",
            lineno: 335
          },
          {
            function: "null.<anonymous>",
            abs_path: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\index.js",
            pre_context: [
              " return next(layerError || err);",
              " }",
              "",
              " if (route) {",
              " return layer.handle_request(req, res, next);",
              " }",
              ""
            ],
            post_context: [
              " });",
              " }",
              "",
              " function trim_prefix(layer, layerError, layerPath, path) {",
              " if (layerPath.length !== 0) {",
              " // Validate path breaks on a path separator",
              " var c = path[layerPath.length]"
            ],
            filename: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\index.js",
            module: "index",
            colno: 7,
            in_app: true,
            context_line: " trim_prefix(layer, layerError, layerPath, path);",
            lineno: 284
          },
          {
            function: "trim_prefix",
            abs_path: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\index.js",
            pre_context: [
              " }",
              "",
              " debug('%s %s : %s', layer.name, layerPath, req.originalUrl);",
              "",
              " if (layerError) {",
              " layer.handle_error(layerError, req, res, next);",
              " } else {"
            ],
            post_context: [
              " }",
              " }",
              "};",
              "",
              "/**",
              " * Process any parameters for the layer.",
              " * @private"
            ],
            filename: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\index.js",
            module: "index",
            colno: 13,
            in_app: true,
            context_line: " layer.handle_request(req, res, next);",
            lineno: 317
          },
          {
            function: "Layer.handle [as handle_request]",
            abs_path: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\layer.js",
            pre_context: [
              "",
              " if (fn.length > 3) {",
              " // not a standard request handler",
              " return next();",
              " }",
              "",
              " try {"
            ],
            post_context: [
              " } catch (err) {",
              " next(err);",
              " }",
              "};",
              "",
              "/**",
              " * Check if this route matches `path`, if so"
            ],
            filename: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\layer.js",
            module: "layer",
            colno: 5,
            in_app: true,
            context_line: " fn(req, res, next);",
            lineno: 95
          },
          {
            function: "query",
            abs_path: "C:\Users\NASA\Desktop\test\node_modules\express\lib\middleware\query.js",
            pre_context: [
              "",
              " return function query(req, res, next){",
              " if (!req.query) {",
              " var val = parseUrl(req).query;",
              " req.query = queryparse(val, opts);",
              " }",
              ""
            ],
            post_context: [
              " };",
              "};",
              ""
            ],
            filename: "C:\Users\NASA\Desktop\test\node_modules\express\lib\middleware\query.js",
            module: "query",
            colno: 5,
            in_app: true,
            context_line: " next();",
            lineno: 45
          },
          {
            function: "next",
            abs_path: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\index.js",
            pre_context: [
              " // Capture one-time layer values",
              " req.params = self.mergeParams",
              " ? mergeParams(layer.params, parentParams)",
              " : layer.params;",
              " var layerPath = layer.path;",
              "",
              " // this should be done for the layer"
            ],
            post_context: [
              " if (err) {",
              " return next(layerError || err);",
              " }",
              "",
              " if (route) {",
              " return layer.handle_request(req, res, next);",
              " }"
            ],
            filename: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\index.js",
            module: "index",
            colno: 10,
            in_app: true,
            context_line: " self.process_params(layer, paramcalled, req, res, function (err) {",
            lineno: 275
          },
          {
            function: "Function.process_params",
            abs_path: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\index.js",
            pre_context: [
              " var params = this.params;",
              "",
              " // captured parameters from the layer, keys and values",
              " var keys = layer.keys;",
              "",
              " // fast track",
              " if (!keys || keys.length === 0) {"
            ],
            post_context: [
              " }",
              "",
              " var i = 0;",
              " var name;",
              " var paramIndex = 0;",
              " var key;",
              " var paramVal;"
            ],
            filename: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\index.js",
            module: "index",
            colno: 12,
            in_app: true,
            context_line: " return done();",
            lineno: 335
          },
          {
            function: "null.<anonymous>",
            abs_path: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\index.js",
            pre_context: [
              " return next(layerError || err);",
              " }",
              "",
              " if (route) {",
              " return layer.handle_request(req, res, next);",
              " }",
              ""
            ],
            post_context: [
              " });",
              " }",
              "",
              " function trim_prefix(layer, layerError, layerPath, path) {",
              " if (layerPath.length !== 0) {",
              " // Validate path breaks on a path separator",
              " var c = path[layerPath.length]"
            ],
            filename: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\index.js",
            module: "index",
            colno: 7,
            in_app: true,
            context_line: " trim_prefix(layer, layerError, layerPath, path);",
            lineno: 284
          },
          {
            function: "trim_prefix",
            abs_path: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\index.js",
            pre_context: [
              " }",
              "",
              " debug('%s %s : %s', layer.name, layerPath, req.originalUrl);",
              "",
              " if (layerError) {",
              " layer.handle_error(layerError, req, res, next);",
              " } else {"
            ],
            post_context: [
              " }",
              " }",
              "};",
              "",
              "/**",
              " * Process any parameters for the layer.",
              " * @private"
            ],
            filename: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\index.js",
            module: "index",
            colno: 13,
            in_app: true,
            context_line: " layer.handle_request(req, res, next);",
            lineno: 317
          },
          {
            function: "Layer.handle [as handle_request]",
            abs_path: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\layer.js",
            pre_context: [
              "",
              " if (fn.length > 3) {",
              " // not a standard request handler",
              " return next();",
              " }",
              "",
              " try {"
            ],
            post_context: [
              " } catch (err) {",
              " next(err);",
              " }",
              "};",
              "",
              "/**",
              " * Check if this route matches `path`, if so"
            ],
            filename: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\layer.js",
            module: "layer",
            colno: 5,
            in_app: true,
            context_line: " fn(req, res, next);",
            lineno: 95
          },
          {
            function: "expressInit",
            abs_path: "C:\Users\NASA\Desktop\test\node_modules\express\lib\middleware\init.js",
            pre_context: [
              " req.next = next;",
              "",
              " setPrototypeOf(req, app.request)",
              " setPrototypeOf(res, app.response)",
              "",
              " res.locals = res.locals || Object.create(null);",
              ""
            ],
            post_context: [
              " };",
              "};",
              "",
              ""
            ],
            filename: "C:\Users\NASA\Desktop\test\node_modules\express\lib\middleware\init.js",
            module: "init",
            colno: 5,
            in_app: true,
            context_line: " next();",
            lineno: 40
          },
          {
            function: "next",
            abs_path: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\index.js",
            pre_context: [
              " // Capture one-time layer values",
              " req.params = self.mergeParams",
              " ? mergeParams(layer.params, parentParams)",
              " : layer.params;",
              " var layerPath = layer.path;",
              "",
              " // this should be done for the layer"
            ],
            post_context: [
              " if (err) {",
              " return next(layerError || err);",
              " }",
              "",
              " if (route) {",
              " return layer.handle_request(req, res, next);",
              " }"
            ],
            filename: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\index.js",
            module: "index",
            colno: 10,
            in_app: true,
            context_line: " self.process_params(layer, paramcalled, req, res, function (err) {",
            lineno: 275
          },
          {
            function: "Function.process_params",
            abs_path: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\index.js",
            pre_context: [
              " var params = this.params;",
              "",
              " // captured parameters from the layer, keys and values",
              " var keys = layer.keys;",
              "",
              " // fast track",
              " if (!keys || keys.length === 0) {"
            ],
            post_context: [
              " }",
              "",
              " var i = 0;",
              " var name;",
              " var paramIndex = 0;",
              " var key;",
              " var paramVal;"
            ],
            filename: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\index.js",
            module: "index",
            colno: 12,
            in_app: true,
            context_line: " return done();",
            lineno: 335
          },
          {
            function: "null.<anonymous>",
            abs_path: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\index.js",
            pre_context: [
              " return next(layerError || err);",
              " }",
              "",
              " if (route) {",
              " return layer.handle_request(req, res, next);",
              " }",
              ""
            ],
            post_context: [
              " });",
              " }",
              "",
              " function trim_prefix(layer, layerError, layerPath, path) {",
              " if (layerPath.length !== 0) {",
              " // Validate path breaks on a path separator",
              " var c = path[layerPath.length]"
            ],
            filename: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\index.js",
            module: "index",
            colno: 7,
            in_app: true,
            context_line: " trim_prefix(layer, layerError, layerPath, path);",
            lineno: 284
          },
          {
            function: "trim_prefix",
            abs_path: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\index.js",
            pre_context: [
              " }",
              "",
              " debug('%s %s : %s', layer.name, layerPath, req.originalUrl);",
              "",
              " if (layerError) {",
              " layer.handle_error(layerError, req, res, next);",
              " } else {"
            ],
            post_context: [
              " }",
              " }",
              "};",
              "",
              "/**",
              " * Process any parameters for the layer.",
              " * @private"
            ],
            filename: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\index.js",
            module: "index",
            colno: 13,
            in_app: true,
            context_line: " layer.handle_request(req, res, next);",
            lineno: 317
          },
          {
            function: "Layer.handle [as handle_request]",
            abs_path: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\layer.js",
            pre_context: [
              "",
              " if (fn.length > 3) {",
              " // not a standard request handler",
              " return next();",
              " }",
              "",
              " try {"
            ],
            post_context: [
              " } catch (err) {",
              " next(err);",
              " }",
              "};",
              "",
              "/**",
              " * Check if this route matches `path`, if so"
            ],
            filename: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\layer.js",
            module: "layer",
            colno: 5,
            in_app: true,
            context_line: " fn(req, res, next);",
            lineno: 95
          },
          {
            function: "ravenRequestMiddleware",
            abs_path: "C:\Users\NASA\Desktop\test\node_modules\raven\lib\client.js",
            pre_context: [
              " setShouldSendCallback: function(callback) {",
              " return this.setCallbackHelper('shouldSendCallback', callback);",
              " },",
              "",
              " requestHandler: function() {",
              " var self = this;",
              " return function ravenRequestMiddleware(req, res, next) {"
            ],
            post_context: [
              " domain.active.add(req);",
              " domain.active.add(res);",
              " next();",
              " });",
              " };",
              " },",
              ""
            ],
            filename: "C:\Users\NASA\Desktop\test\node_modules\raven\lib\client.js",
            module: "client",
            colno: 12,
            in_app: true,
            context_line: " self.context({req: req}, function() {",
            lineno: 543
          },
          {
            function: "Raven.context",
            abs_path: "C:\Users\NASA\Desktop\test\node_modules\raven\lib\client.js",
            pre_context: [
              " func = ctx;",
              " ctx = {};",
              " }",
              "",
              " // todo/note: raven-js takes an args param to do apply(this, args)",
              " // i don't think it's correct/necessary to bind this to the wrap call",
              " // and i don't know if we need to support the args param; it's undocumented"
            ],
            post_context: [
              " },",
              "",
              " wrap: function(options, func) {",
              " if (!this.installed) {",
              " utils.consoleAlertOnce(",
              " 'Raven has not been installed, therefore no breadcrumbs will be captured. Call `Raven.config(...).install()` to fix this.'",
              " );"
            ],
            filename: "C:\Users\NASA\Desktop\test\node_modules\raven\lib\client.js",
            module: "client",
            colno: 33,
            in_app: true,
            context_line: " return this.wrap(ctx, func).apply(null);",
            lineno: 417
          },
          {
            function: "runBound",
            abs_path: "domain.js",
            module: "domain",
            in_app: false,
            lineno: 388,
            colno: 12,
            filename: "domain.js"
          },
          {
            function: "bound",
            abs_path: "domain.js",
            module: "domain",
            in_app: false,
            lineno: 377,
            colno: 14,
            filename: "domain.js"
          },
          {
            function: "null.<anonymous>",
            abs_path: "C:\Users\NASA\Desktop\test\node_modules\raven\lib\client.js",
            pre_context: [
              "",
              " requestHandler: function() {",
              " var self = this;",
              " return function ravenRequestMiddleware(req, res, next) {",
              " self.context({req: req}, function() {",
              " domain.active.add(req);",
              " domain.active.add(res);"
            ],
            post_context: [
              " });",
              " };",
              " },",
              "",
              " errorHandler: function() {",
              " var self = this;",
              " return function ravenErrorMiddleware(err, req, res, next) {"
            ],
            filename: "C:\Users\NASA\Desktop\test\node_modules\raven\lib\client.js",
            module: "client",
            colno: 9,
            in_app: true,
            context_line: " next();",
            lineno: 546
          },
          {
            function: "next",
            abs_path: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\index.js",
            pre_context: [
              " // Capture one-time layer values",
              " req.params = self.mergeParams",
              " ? mergeParams(layer.params, parentParams)",
              " : layer.params;",
              " var layerPath = layer.path;",
              "",
              " // this should be done for the layer"
            ],
            post_context: [
              " if (err) {",
              " return next(layerError || err);",
              " }",
              "",
              " if (route) {",
              " return layer.handle_request(req, res, next);",
              " }"
            ],
            filename: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\index.js",
            module: "index",
            colno: 10,
            in_app: true,
            context_line: " self.process_params(layer, paramcalled, req, res, function (err) {",
            lineno: 275
          },
          {
            function: "Function.process_params",
            abs_path: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\index.js",
            pre_context: [
              " var params = this.params;",
              "",
              " // captured parameters from the layer, keys and values",
              " var keys = layer.keys;",
              "",
              " // fast track",
              " if (!keys || keys.length === 0) {"
            ],
            post_context: [
              " }",
              "",
              " var i = 0;",
              " var name;",
              " var paramIndex = 0;",
              " var key;",
              " var paramVal;"
            ],
            filename: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\index.js",
            module: "index",
            colno: 12,
            in_app: true,
            context_line: " return done();",
            lineno: 335
          },
          {
            function: "null.<anonymous>",
            abs_path: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\index.js",
            pre_context: [
              " // this should be done for the layer",
              " self.process_params(layer, paramcalled, req, res, function (err) {",
              " if (err) {",
              " return next(layerError || err);",
              " }",
              "",
              " if (route) {"
            ],
            post_context: [
              " }",
              "",
              " trim_prefix(layer, layerError, layerPath, path);",
              " });",
              " }",
              "",
              " function trim_prefix(layer, layerError, layerPath, path) {"
            ],
            filename: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\index.js",
            module: "index",
            colno: 22,
            in_app: true,
            context_line: " return layer.handle_request(req, res, next);",
            lineno: 281
          },
          {
            function: "Layer.handle [as handle_request]",
            abs_path: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\layer.js",
            pre_context: [
              "",
              " if (fn.length > 3) {",
              " // not a standard request handler",
              " return next();",
              " }",
              "",
              " try {"
            ],
            post_context: [
              " } catch (err) {",
              " next(err);",
              " }",
              "};",
              "",
              "/**",
              " * Check if this route matches `path`, if so"
            ],
            filename: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\layer.js",
            module: "layer",
            colno: 5,
            in_app: true,
            context_line: " fn(req, res, next);",
            lineno: 95
          },
          {
            function: "Route.dispatch",
            abs_path: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\route.js",
            pre_context: [
              " var method = req.method.toLowerCase();",
              " if (method === 'head' && !this.methods['head']) {",
              " method = 'get';",
              " }",
              "",
              " req.route = this;",
              ""
            ],
            post_context: [
              "",
              " function next(err) {",
              " // signal to exit route",
              " if (err && err === 'route') {",
              " return done();",
              " }",
              ""
            ],
            filename: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\route.js",
            module: "route",
            colno: 3,
            in_app: true,
            context_line: " next();",
            lineno: 112
          },
          {
            function: "next",
            abs_path: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\route.js",
            pre_context: [
              " if (layer.method && layer.method !== method) {",
              " return next(err);",
              " }",
              "",
              " if (err) {",
              " layer.handle_error(err, req, res, next);",
              " } else {"
            ],
            post_context: [
              " }",
              " }",
              "};",
              "",
              "/**",
              " * Add a handler for all HTTP verbs to this route.",
              " *"
            ],
            filename: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\route.js",
            module: "route",
            colno: 13,
            in_app: true,
            context_line: " layer.handle_request(req, res, next);",
            lineno: 137
          },
          {
            function: "Layer.handle [as handle_request]",
            abs_path: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\layer.js",
            pre_context: [
              "",
              " if (fn.length > 3) {",
              " // not a standard request handler",
              " return next();",
              " }",
              "",
              " try {"
            ],
            post_context: [
              " } catch (err) {",
              " next(err);",
              " }",
              "};",
              "",
              "/**",
              " * Check if this route matches `path`, if so"
            ],
            filename: "C:\Users\NASA\Desktop\test\node_modules\express\lib\router\layer.js",
            module: "layer",
            colno: 5,
            in_app: true,
            context_line: " fn(req, res, next);",
            lineno: 95
          },
          {
            function: "mainHandler",
            abs_path: "C:\Users\NASA\Desktop\test\app.js",
            pre_context: [
              "// Must configure Raven before doing anything else with it ",
              "Raven.config('https://66835303dd6b488a84475908c1444928@sentry.io/1194628').install(); ",
              " ",
              "// The request handler must be the first middleware on the app ",
              "app.use(Raven.requestHandler()); ",
              " ",
              "app.get('/', function mainHandler(req, res) { "
            ],
            post_context: [
              "}); ",
              " ",
              "// The error handler must be before any other error middleware ",
              "app.use(Raven.errorHandler()); ",
              " ",
              "// Optional fallthrough error handler ",
              "app.use(function onError(err, req, res, next) { "
            ],
            filename: "C:\Users\NASA\Desktop\test\app.js",
            module: "app",
            colno: 11,
            in_app: true,
            context_line: " throw new Error('Broke!'); ",
            lineno: 11
          }
        ]
      },
      type: "Error",
      value: "Broke!"
    }]
  },
  sentry.interfaces.Http: {
    url: "http://localhost/",
    headers: [
      [
        "Accept-Language",
        "en-US,en;q=0.9"
      ],
      [
        "Accept-Encoding",
        "gzip, deflate, br"
      ],
      [
        "Connection",
        "keep-alive"
      ],
      [
        "Accept",
        "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8"
      ],
      [
        "User-Agent",
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36"
      ],
      [
        "Dnt",
        "1"
      ],
      [
        "Host",
        "localhost:3000"
      ],
      [
        "Cache-Control",
        "max-age=0"
      ],
      [
        "Upgrade-Insecure-Requests",
        "1"
      ]
    ],
    method: "GET"
  },
  sentry.interfaces.Message: {
    message: "Error: Broke!"
  },
  sentry.interfaces.User: {
    ip_address: "::1"
  },
  type: "error",
  version: "5"
}